<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web Slinger - Michael Bowman</title>
    <description>Web Slinger - Michael Bowman - Dayton, Ohio</description>
    <link>http://webslinger.io/</link>
    <atom:link href="http://webslinger.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 28 Mar 2015 15:57:36 -0400</pubDate>
    <lastBuildDate>Sat, 28 Mar 2015 15:57:36 -0400</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Hack Design - Level Up via Email</title>
        <description>&lt;div class=&quot;post-image&quot;&gt;
    &lt;img src=&quot;/assets/hackdesign.png&quot; /&gt;
&lt;/div&gt;

&lt;p class=&quot;typl8-drop-cap&quot;&gt;
One of my goals for this year has been to level up my design skills.
I want to be able to put the same level of thought and craftsmanship
into my design decisions as I do on the development side of things.
One of the better resources for me so far has been
&lt;a href=&quot;http://hackdesign.org&quot;&gt;Hack Design&lt;/a&gt;,
a design course over weekly emails.
&lt;/p&gt;

&lt;p&gt;Last week, after signing up, I recieved
&lt;a href=&quot;https://hackdesign.org/lessons/0&quot;&gt;Lesson 0&lt;/a&gt;. It was pretty light on
meaty material, but introduced the weekly email format and suggested
watching &lt;a href=&quot;http://www.netflix.com/WiMovie/70114976?trkid=439131&quot;&gt;Objectified&lt;/a&gt;
by Gary Hustwit. Since I had already seen it, along with the other two
films in the &lt;a href=&quot;http://en.wikipedia.org/wiki/Design_Trilogy&quot;&gt;Design Trilogy&lt;/a&gt;,
I had mostly forgotten about the course until a new lesson
showed up in my inbox this morning.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hackdesign.org/lessons/1&quot;&gt;Lesson 1&lt;/a&gt; contains five links to articles
and resources covering the “What is Design?” topic. These hit the points
you would expect for a first lesson, such as
&lt;a href=&quot;https://www.vitsoe.com/gb/about/good-design&quot;&gt;Dieter Rams Ten Principles for Good Design&lt;/a&gt;
and an
&lt;a href=&quot;http://www.uxbooth.com/articles/complete-beginners-guide-to-interaction-design/&quot;&gt;Indroduction to Interaction Design&lt;/a&gt;,
but also a
&lt;a href=&quot;http://somerandomdude.com/2012/01/10/transition-from-development-to-design/&quot;&gt;great article by P.J. Onori&lt;/a&gt;
on how he transitioned from a developer to a designer. Each of the articles
in the lesson has been a spring board for finding even more great
content and design resources. One of my favorites so far has been the
&lt;a href=&quot;http://creativemornings.com/&quot;&gt;Creative Mornings&lt;/a&gt; website. It has
a &lt;a href=&quot;http://creativemornings.com/talks&quot;&gt;vast archive&lt;/a&gt; of short talks on a
huge variety of topics. I’ll have more than enough content to keep me busy
until next week’s lesson.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://hackdesign.org&quot;&gt;Hack Design&lt;/a&gt; has fifty lessons listed on their website,
perfect for helping me hit my goal of becoming a better designer this year.&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Mar 2015 00:00:00 -0400</pubDate>
        <link>http://webslinger.io/2015/03/24/hack-design.html</link>
        <guid isPermaLink="true">http://webslinger.io/2015/03/24/hack-design.html</guid>
        
        
      </item>
    
      <item>
        <title>Building WebSlinger.io - Github Hosting</title>
        <description>&lt;div class=&quot;post-image&quot;&gt;
    &lt;img src=&quot;/assets/2015-vla.jpg&quot; /&gt;
    &lt;div class=&quot;credit&quot;&gt;
        Image courtesy of NRAO/AUI
        &lt;a href=&quot;http://images.nrao.edu/Telescopes/VLA/92&quot;&gt;VLA at Sunset&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p class=&quot;typl8-drop-cap&quot;&gt;
&lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt; is an awesome resource for developers.
Besides providing a safe, secure, organized place to store the source code for
your projects, it also has a way publish static files to the web.
I use it for this site, and in this post, I&#39;ll show you how I set it up.
&lt;/p&gt;

&lt;p&gt;The first step is to create a github account and repository.
GitHub has
the best step-by-step instructions on how to do this. Go to their
&lt;a href=&quot;https://help.github.com&quot;&gt;help site&lt;/a&gt;
and follow the
&lt;a href=&quot;https://help.github.com/articles/set-up-git&quot;&gt;Setup Git&lt;/a&gt; and
&lt;a href=&quot;https://help.github.com/articles/create-a-repo&quot;&gt;Create a Repo&lt;/a&gt; guides.
Once you have a repository created and checked out on your local machine, you’ll
use a feature called
&lt;a href=&quot;https://help.github.com/articles/user-organization-and-project-pages/#project-pages&quot;&gt;GitHub Pages&lt;/a&gt;
to serve static files out to your users.
This feature of GitHub will automatically publish anything checked into a
specially named branch (gh-pages) to a url corresponding to your project name.&lt;/p&gt;

&lt;p&gt;To create the GitHub pages branch, open a terminal and navigate to the root
directory for your checked out project. Then type the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git branch gh-pages
git checkout gh-pages&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first command, “git branch gh-pages”, created a gh-pages branch. The second
command, “git checkout gh-pages” switched your local, working source tree to
that branch. Now, let’s open a text editor and create an index.html file in
our new branch:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Howdy&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello there from GitHub pages!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So far, so good. Now, we need to commit our changes and push them to GitHub so
we can see them.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git add .
git commit
git push --set-upstream origin gh-pages&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This set of commands first adds the new index.html file we created to git,
the commits this revision, then pushes the changes up to GitHub.&lt;/p&gt;

&lt;p&gt;Now, open a browser and check http://username.github.io/project, where
“username” is your GitHub username and “project” is the name of your project.
If everything worked correctly, you should see the plain index.html we just created
with a title of “Howdy” and a headline saying “Hello there from GitHub pages!”.
If you have problems, wait a few minutes and check again (it can sometimes
take a little time for GitHub’s publishing scripts to do their work). Also,
be sure you named your branch exactly “gh-pages”. This is the special branch
GitHub Pages is looking for. If you’re still having problems, check out
the &lt;a href=&quot;https://help.github.com/articles/user-organization-and-project-pages/#project-pages&quot;&gt;GitHub Pages Help&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Ok, the next step is to point your custom domain name at the url we just used.
I manage my domain names through &lt;a href=&quot;http://namecheap.com&quot;&gt;NameCheap&lt;/a&gt;. Your
provider may be different, but the process should be similar. Go to the
management page for your domain name and look for an option called
“URL Forwarding”. Here you’ll want to create two CNAME entries, one for when
someone enters http://yourAwesomeDomain.com and another one for when
someone enters http://www.yourAwesomeDomain.com. Here’s a screenshot of
my entries for webslinger.io:&lt;/p&gt;

&lt;div class=&quot;post-image&quot;&gt;
    &lt;img src=&quot;/assets/2015-namecheap-webslinger-urlforwarding.png&quot; alt=&quot;CNAME Entries&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The final piece of this puzzle is to create a CNAME file next to index.html (in
the root of your project). This file should be named “CNAME” (all caps, with
no extension) and contain your domain name (without the preceding http:// or www).
For example, my CNAME file for this site looks like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;webslinger.io&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After committing and pushing the CNAME file, you should be able to access your
site at http://yourAwesomeDomain.com and see the index.html in your gh-pages
branch. The source code for this site is on GitHub, so you can always refer
to it for reference and see how my code is setup. My master branch, containing
the raw source code and build files, is at
&lt;a href=&quot;https://github.com/bowmanmc/webslinger.io&quot;&gt;https://github.com/bowmanmc/webslinger.io&lt;/a&gt;
and the built version of that code (what you’re looking at now) is available
in the gh-pages branch at
&lt;a href=&quot;https://github.com/bowmanmc/webslinger.io/tree/gh-pages&quot;&gt;https://github.com/bowmanmc/webslinger.io/tree/gh-pages&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Mar 2015 00:00:00 -0400</pubDate>
        <link>http://webslinger.io/2015/03/23/github-hosting.html</link>
        <guid isPermaLink="true">http://webslinger.io/2015/03/23/github-hosting.html</guid>
        
        
      </item>
    
  </channel>
</rss>
