/*! normalize.css v3.0.2 | MIT License | git.io/normalize */img,legend{border:0}legend,td,th{padding:0}html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,optgroup,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}pre,textarea{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none} input[type=reset]button,html input[type=button],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{height:auto}input[type=search]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}table{border-collapse:collapse;border-spacing:0}
/*!
TYPEPLATE : STARTER KIT
URL ........... http://typeplate.com
VERSION ....... 2.1.0
Github ........ https://github.com/typeplate/starter-kit
AUTHORS ....... Dennis Gaebel (@gryghostvisuals) & Zachary Kain (@zakkain)
LICENSE ....... Creative Commmons Attribution 3.0 (http://creativecommons.org/licenses/by/3.0)
LICENSE URL ... https://github.com/typeplate/starter-kit/blob/master/license.txt
*/@font-face{font-family:Ampersand;src:local("Georgia"),local("Garamond"),local("Palatino"),local("Book Antiqua");unicode-range:U+0026}@font-face{font-family:Ampersand;src:local("Georgia");unicode-range:U+270C}.typl8-ampersand{font-family:Ampersand,Verdana,sans-serif}.typl8-breakword{word-wrap:break-word}.typl8-normal-wrap{word-wrap:normal}.typl8-inherit-wrap{word-wrap:auto}.typl8-font-feature--smcp{-webkit-font-feature-settings:"smcp";-moz-font-feature-settings:"smcp";-ms-font-feature-settings:"smcp";font-feature-settings:"smcp"}.typl8-font-feature--onum{-webkit-font-feature-settings:'onum';-moz-font-feature-settings:'onum';-ms-font-feature-settings:'onum';font-feature-settings:'onum'}.typl8-drop-cap:first-letter{float:left;margin:10px 10px 0 0;padding:0 20px;font-size:4em;font-family:inherit;line-height:1;text-indent:0;background:0 0;color:inherit}p+.typl8-drop-cap{text-indent:0;margin-top:0}html{font:400 112.5%/1.65 serif}body{-webkit-hyphens:auto;-moz-hyphens:auto;-ms-hyphens:auto;hyphens:auto;word-wrap:break-word;color:#444}small{font-size:65%}h1,h2,h3,h4,h5,h6{line-height:1;margin-top:0;text-rendering:optimizeLegibility;color:#222}.typl8-tera{font-size:117px;font-size:6.5rem;margin-bottom:4.57px;margin-bottom:.25385rem}.typl8-giga{font-size:90px;font-size:5rem;margin-bottom:5.94px;margin-bottom:.33rem}.typl8-mega{font-size:72px;font-size:4rem;margin-bottom:7.43px;margin-bottom:.4125rem}.typl8-alpha,h1{font-size:60px;font-size:3.33333rem;margin-bottom:8.91px;margin-bottom:.495rem}.typl8-beta,h2{font-size:48px;font-size:2.6667rem;margin-bottom:11.14px;margin-bottom:.61875rem}.typl8-gamma,h3{font-size:36px;font-size:2rem;margin-bottom:14.85px;margin-bottom:.825rem}.typl8-delta,h4{font-size:24px;font-size:1.3333333333333333rem;margin-bottom:22.28px;margin-bottom:1.2375rem}.typl8-epsilon,h5{font-size:21px;font-size:1.16667rem;margin-bottom:25.46px;margin-bottom:1.41429rem}.typl8-zeta,h6{font-size:18px;font-size:1rem;margin-bottom:29.7px;margin-bottom:1.65rem}p{margin:auto auto 1.5em}p+p{text-indent:1.5em;margin-top:-1.5em}abbr,acronym,blockquote,code,input,kbd,q,samp,var{-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none}pre code{word-wrap:normal;white-space:-moz-pre-wrap;white-space:pre-wrap}code,pre{white-space:pre}code{font-family:monospace}abbr{-webkit-font-variant:small-caps;-moz-font-variant:small-caps;-ms-font-variant:small-caps;font-variant:small-caps;font-weight:600;text-transform:lowercase;color:gray}abbr[title]:hover{cursor:help}.typl8-lining dd,.typl8-lining dt{display:inline;margin:0}.typl8-lining dd+dt:before,.typl8-lining dt+dt:before{content:"\A";white-space:pre}.typl8-lining dd+dd:before{content:", "}.typl8-lining dd:before{content:": ";margin-left:-.2em}.typl8-dictionary-style dt{display:inline;counter-reset:definitions}.typl8-dictionary-style dt+dt:before{content:", ";margin-left:-.2em}.typl8-dictionary-style dd{display:block;counter-increment:definitions}.typl8-dictionary-style dd:before{content:counter(definitions,decimal)". "}.typl8-blockquote p:last-of-type{margin-bottom:-.825em}.typl8-blockquote+figcaption{display:block;font-size:inherit;text-align:right}.typl8-blockquote+figcaption:before{content:"-"}.typl8-pull-quote{position:relative;padding:1em}.typl8-pull-quote:after,.typl8-pull-quote:before{height:1em;opacity:.15;position:absolute;font-size:4em;color:#dc976e}.typl8-pull-quote:before{content:'“';top:0;left:0}.typl8-pull-quote:after{content:'”';bottom:0;right:0}
/*# sourceMappingURL=data:application/json;base64, */